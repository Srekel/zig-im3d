// auto generated by c2z
#include <new>
#include "im3d.h"

using namespace Im3d;

extern "C" const void *_1_Im3d_Id_Invalid_ = (void *)&::Im3d::Id_Invalid;
extern "C" AppData &_1_Im3d_GetAppData_() { return ::Im3d::GetAppData(); }
extern "C" void _1_Im3d_NewFrame_() { ::Im3d::NewFrame(); }
extern "C" void _1_Im3d_EndFrame_() { ::Im3d::EndFrame(); }
extern "C" const DrawList *_1_Im3d_GetDrawLists_() { return ::Im3d::GetDrawLists(); }
extern "C" U32 _1_Im3d_GetDrawListCount_() { return ::Im3d::GetDrawListCount(); }
extern "C" const TextDrawList *_1_Im3d_GetTextDrawLists_() { return ::Im3d::GetTextDrawLists(); }
extern "C" U32 _1_Im3d_GetTextDrawListCount_() { return ::Im3d::GetTextDrawListCount(); }
extern "C" void _1_Im3d_Draw_() { ::Im3d::Draw(); }
extern "C" void _1_Im3d_BeginPoints_() { ::Im3d::BeginPoints(); }
extern "C" void _1_Im3d_BeginLines_() { ::Im3d::BeginLines(); }
extern "C" void _1_Im3d_BeginLineLoop_() { ::Im3d::BeginLineLoop(); }
extern "C" void _1_Im3d_BeginLineStrip_() { ::Im3d::BeginLineStrip(); }
extern "C" void _1_Im3d_BeginTriangles_() { ::Im3d::BeginTriangles(); }
extern "C" void _1_Im3d_BeginTriangleStrip_() { ::Im3d::BeginTriangleStrip(); }
extern "C" void _1_Im3d_End_() { ::Im3d::End(); }
extern "C" void _1_Im3d_Vertex_(const Vec3 &_position) { ::Im3d::Vertex(_position); }
extern "C" void _2_Im3d_Vertex_(const Vec3 &_position, Color _color) { ::Im3d::Vertex(_position, _color); }
extern "C" void _3_Im3d_Vertex_(const Vec3 &_position, float _size) { ::Im3d::Vertex(_position, _size); }
extern "C" void _4_Im3d_Vertex_(const Vec3 &_position, float _size, Color _color) { ::Im3d::Vertex(_position, _size, _color); }
extern "C" void _5_Im3d_Vertex_(float _x, float _y, float _z) { ::Im3d::Vertex(_x, _y, _z); }
extern "C" void _6_Im3d_Vertex_(float _x, float _y, float _z, Color _color) { ::Im3d::Vertex(_x, _y, _z, _color); }
extern "C" void _7_Im3d_Vertex_(float _x, float _y, float _z, float _size) { ::Im3d::Vertex(_x, _y, _z, _size); }
extern "C" void _8_Im3d_Vertex_(float _x, float _y, float _z, float _size, Color _color) { ::Im3d::Vertex(_x, _y, _z, _size, _color); }
extern "C" void _1_Im3d_PushColor_() { ::Im3d::PushColor(); }
extern "C" void _2_Im3d_PushColor_(Color _color) { ::Im3d::PushColor(_color); }
extern "C" void _1_Im3d_PopColor_() { ::Im3d::PopColor(); }
extern "C" void _1_Im3d_SetColor_(Color _color) { ::Im3d::SetColor(_color); }
extern "C" void _2_Im3d_SetColor_(float _r, float _g, float _b, float _a) { ::Im3d::SetColor(_r, _g, _b, _a); }
extern "C" Color _1_Im3d_GetColor_() { return ::Im3d::GetColor(); }
extern "C" void _1_Im3d_PushAlpha_() { ::Im3d::PushAlpha(); }
extern "C" void _2_Im3d_PushAlpha_(float _alpha) { ::Im3d::PushAlpha(_alpha); }
extern "C" void _1_Im3d_PopAlpha_() { ::Im3d::PopAlpha(); }
extern "C" void _1_Im3d_SetAlpha_(float _alpha) { ::Im3d::SetAlpha(_alpha); }
extern "C" float _1_Im3d_GetAlpha_() { return ::Im3d::GetAlpha(); }
extern "C" void _1_Im3d_PushSize_() { ::Im3d::PushSize(); }
extern "C" void _2_Im3d_PushSize_(float _size) { ::Im3d::PushSize(_size); }
extern "C" void _1_Im3d_PopSize_() { ::Im3d::PopSize(); }
extern "C" void _1_Im3d_SetSize_(float _size) { ::Im3d::SetSize(_size); }
extern "C" float _1_Im3d_GetSize_() { return ::Im3d::GetSize(); }
extern "C" void _1_Im3d_PushEnableSorting_() { ::Im3d::PushEnableSorting(); }
extern "C" void _2_Im3d_PushEnableSorting_(bool _enable) { ::Im3d::PushEnableSorting(_enable); }
extern "C" void _1_Im3d_PopEnableSorting_() { ::Im3d::PopEnableSorting(); }
extern "C" void _1_Im3d_EnableSorting_(bool _enable) { ::Im3d::EnableSorting(_enable); }
extern "C" void _1_Im3d_PushDrawState_() { ::Im3d::PushDrawState(); }
extern "C" void _1_Im3d_PopDrawState_() { ::Im3d::PopDrawState(); }
extern "C" void _1_Im3d_PushMatrix_() { ::Im3d::PushMatrix(); }
extern "C" void _2_Im3d_PushMatrix_(const Mat4 &_mat4) { ::Im3d::PushMatrix(_mat4); }
extern "C" void _1_Im3d_PopMatrix_() { ::Im3d::PopMatrix(); }
extern "C" void _1_Im3d_SetMatrix_(const Mat4 &_mat4) { ::Im3d::SetMatrix(_mat4); }
extern "C" void _1_Im3d_SetIdentity_() { ::Im3d::SetIdentity(); }
extern "C" void _1_Im3d_MulMatrix_(const Mat4 &_mat4) { ::Im3d::MulMatrix(_mat4); }
extern "C" void _1_Im3d_Translate_(float _x, float _y, float _z) { ::Im3d::Translate(_x, _y, _z); }
extern "C" void _2_Im3d_Translate_(const Vec3 &_vec3) { ::Im3d::Translate(_vec3); }
extern "C" void _1_Im3d_Rotate_(const Vec3 &_axis, float _angle) { ::Im3d::Rotate(_axis, _angle); }
extern "C" void _2_Im3d_Rotate_(const Mat3 &_rotation) { ::Im3d::Rotate(_rotation); }
extern "C" void _1_Im3d_Scale_(float _x, float _y, float _z) { ::Im3d::Scale(_x, _y, _z); }
extern "C" void _1_Im3d_DrawXyzAxes_() { ::Im3d::DrawXyzAxes(); }
extern "C" void _1_Im3d_DrawPoint_(const Vec3 &_position, float _size, Color _color) { ::Im3d::DrawPoint(_position, _size, _color); }
extern "C" void _1_Im3d_DrawLine_(const Vec3 &_a, const Vec3 &_b, float _size, Color _color) { ::Im3d::DrawLine(_a, _b, _size, _color); }
extern "C" void _1_Im3d_DrawQuad_(const Vec3 &_a, const Vec3 &_b, const Vec3 &_c, const Vec3 &_d) { ::Im3d::DrawQuad(_a, _b, _c, _d); }
extern "C" void _2_Im3d_DrawQuad_(const Vec3 &_origin, const Vec3 &_normal, const Vec2 &_size) { ::Im3d::DrawQuad(_origin, _normal, _size); }
extern "C" void _1_Im3d_DrawQuadFilled_(const Vec3 &_a, const Vec3 &_b, const Vec3 &_c, const Vec3 &_d) { ::Im3d::DrawQuadFilled(_a, _b, _c, _d); }
extern "C" void _2_Im3d_DrawQuadFilled_(const Vec3 &_origin, const Vec3 &_normal, const Vec2 &_size) { ::Im3d::DrawQuadFilled(_origin, _normal, _size); }
extern "C" void _1_Im3d_DrawCircle_(const Vec3 &_origin, const Vec3 &_normal, float _radius, int _detail) { ::Im3d::DrawCircle(_origin, _normal, _radius, _detail); }
extern "C" void _1_Im3d_DrawCircleFilled_(const Vec3 &_origin, const Vec3 &_normal, float _radius, int _detail) { ::Im3d::DrawCircleFilled(_origin, _normal, _radius, _detail); }
extern "C" void _1_Im3d_DrawSphere_(const Vec3 &_origin, float _radius, int _detail) { ::Im3d::DrawSphere(_origin, _radius, _detail); }
extern "C" void _1_Im3d_DrawSphereFilled_(const Vec3 &_origin, float _radius, int _detail) { ::Im3d::DrawSphereFilled(_origin, _radius, _detail); }
extern "C" void _1_Im3d_DrawAlignedBox_(const Vec3 &_min, const Vec3 &_max) { ::Im3d::DrawAlignedBox(_min, _max); }
extern "C" void _1_Im3d_DrawAlignedBoxFilled_(const Vec3 &_min, const Vec3 &_max) { ::Im3d::DrawAlignedBoxFilled(_min, _max); }
extern "C" void _1_Im3d_DrawCylinder_(const Vec3 &_start, const Vec3 &_end, float _radius, int _detail) { ::Im3d::DrawCylinder(_start, _end, _radius, _detail); }
extern "C" void _1_Im3d_DrawCapsule_(const Vec3 &_start, const Vec3 &_end, float _radius, int _detail) { ::Im3d::DrawCapsule(_start, _end, _radius, _detail); }
extern "C" void _1_Im3d_DrawPrism_(const Vec3 &_start, const Vec3 &_end, float _radius, int _sides) { ::Im3d::DrawPrism(_start, _end, _radius, _sides); }
extern "C" void _1_Im3d_DrawArrow_(const Vec3 &_start, const Vec3 &_end, float _headLength, float _headThickness) { ::Im3d::DrawArrow(_start, _end, _headLength, _headThickness); }
extern "C" void _1_Im3d_DrawCone_(const Vec3 &_origin, const Vec3 &_normal, float height, float _radius, int _detail) { ::Im3d::DrawCone(_origin, _normal, height, _radius, _detail); }
extern "C" void _1_Im3d_DrawConeFilled_(const Vec3 &_origin, const Vec3 &_normal, float height, float _radius, int _detail) { ::Im3d::DrawConeFilled(_origin, _normal, height, _radius, _detail); }
extern "C" Id _1_Im3d_MakeId_(const char *_str) { return ::Im3d::MakeId(_str); }
extern "C" Id _2_Im3d_MakeId_(const void *_ptr) { return ::Im3d::MakeId(_ptr); }
extern "C" Id _3_Im3d_MakeId_(int _i) { return ::Im3d::MakeId(_i); }
extern "C" void _1_Im3d_PushId_() { ::Im3d::PushId(); }
extern "C" void _2_Im3d_PushId_(Id _id) { ::Im3d::PushId(_id); }
extern "C" void _3_Im3d_PushId_(const char *_str) { ::Im3d::PushId(_str); }
extern "C" void _4_Im3d_PushId_(const void *_ptr) { ::Im3d::PushId(_ptr); }
extern "C" void _5_Im3d_PushId_(int _i) { ::Im3d::PushId(_i); }
extern "C" void _1_Im3d_PopId_() { ::Im3d::PopId(); }
extern "C" Id _1_Im3d_GetId_() { return ::Im3d::GetId(); }
extern "C" void _1_Im3d_PushLayerId_(Id _layer) { ::Im3d::PushLayerId(_layer); }
extern "C" void _2_Im3d_PushLayerId_(const char *_str) { ::Im3d::PushLayerId(_str); }
extern "C" void _1_Im3d_PopLayerId_() { ::Im3d::PopLayerId(); }
extern "C" Id _1_Im3d_GetLayerId_() { return ::Im3d::GetLayerId(); }
extern "C" bool _1_Im3d_GizmoTranslation_(const char *_id, float *_translation_, bool _local) { return ::Im3d::GizmoTranslation(_id, _translation_, _local); }
extern "C" bool _1_Im3d_GizmoRotation_(const char *_id, float *_rotation_, bool _local) { return ::Im3d::GizmoRotation(_id, _rotation_, _local); }
extern "C" bool _1_Im3d_GizmoScale_(const char *_id, float *_scale_) { return ::Im3d::GizmoScale(_id, _scale_); }
extern "C" bool _1_Im3d_Gizmo_(const char *_id, float *_translation_, float *_rotation_, float *_scale_) { return ::Im3d::Gizmo(_id, _translation_, _rotation_, _scale_); }
extern "C" bool _2_Im3d_Gizmo_(const char *_id, float *_transform_) { return ::Im3d::Gizmo(_id, _transform_); }
extern "C" bool _2_Im3d_GizmoTranslation_(Id _id, float *_translation_, bool _local) { return ::Im3d::GizmoTranslation(_id, _translation_, _local); }
extern "C" bool _2_Im3d_GizmoRotation_(Id _id, float *_rotation_, bool _local) { return ::Im3d::GizmoRotation(_id, _rotation_, _local); }
extern "C" bool _2_Im3d_GizmoScale_(Id _id, float *_scale_) { return ::Im3d::GizmoScale(_id, _scale_); }
extern "C" bool _3_Im3d_Gizmo_(Id _id, float *_transform_) { return ::Im3d::Gizmo(_id, _transform_); }
extern "C" bool _4_Im3d_Gizmo_(Id _id, float *_translation_, float *_rotation_, float *_scale_) { return ::Im3d::Gizmo(_id, _translation_, _rotation_, _scale_); }
extern "C" Id _1_Im3d_GetActiveId_() { return ::Im3d::GetActiveId(); }
extern "C" Id _1_Im3d_GetHotId_() { return ::Im3d::GetHotId(); }
extern "C" bool _1_Im3d_IsVisible_(const Vec3 &_origin, float _radius) { return ::Im3d::IsVisible(_origin, _radius); }
extern "C" bool _2_Im3d_IsVisible_(const Vec3 &_min, const Vec3 &_max) { return ::Im3d::IsVisible(_min, _max); }
extern "C" Context &_1_Im3d_GetContext_() { return ::Im3d::GetContext(); }
extern "C" void _1_Im3d_SetContext_(Context &_ctx) { ::Im3d::SetContext(_ctx); }
extern "C" void _1_Im3d_MergeContexts_(Context &_dst_, const Context &_src) { ::Im3d::MergeContexts(_dst_, _src); }
extern "C" void _1_Im3d_Vec2_init_(::Im3d::Vec2 *self) { new (self)::Im3d::Vec2(); }
extern "C" void _2_Im3d_Vec2_init_(::Im3d::Vec2 *self, float _xy) { new (self)::Im3d::Vec2(_xy); }
extern "C" void _3_Im3d_Vec2_init_(::Im3d::Vec2 *self, float _x, float _y) { new (self)::Im3d::Vec2(_x, _y); }
extern "C" void _1_Im3d_Vec3_init_(::Im3d::Vec3 *self) { new (self)::Im3d::Vec3(); }
extern "C" void _2_Im3d_Vec3_init_(::Im3d::Vec3 *self, float _xyz) { new (self)::Im3d::Vec3(_xyz); }
extern "C" void _3_Im3d_Vec3_init_(::Im3d::Vec3 *self, float _x, float _y, float _z) { new (self)::Im3d::Vec3(_x, _y, _z); }
extern "C" void _4_Im3d_Vec3_init_(::Im3d::Vec3 *self, const Vec2 &_xy, float _z) { new (self)::Im3d::Vec3(_xy, _z); }
extern "C" void _5_Im3d_Vec3_init_(::Im3d::Vec3 *self, const Vec4 &_v) { new (self)::Im3d::Vec3(_v); }
extern "C" void _1_Im3d_Vec4_init_(::Im3d::Vec4 *self) { new (self)::Im3d::Vec4(); }
extern "C" void _2_Im3d_Vec4_init_(::Im3d::Vec4 *self, float _xyzw) { new (self)::Im3d::Vec4(_xyzw); }
extern "C" void _3_Im3d_Vec4_init_(::Im3d::Vec4 *self, float _x, float _y, float _z, float _w) { new (self)::Im3d::Vec4(_x, _y, _z, _w); }
extern "C" void _4_Im3d_Vec4_init_(::Im3d::Vec4 *self, const Vec3 &_xyz, float _w) { new (self)::Im3d::Vec4(_xyz, _w); }
extern "C" void _5_Im3d_Vec4_init_(::Im3d::Vec4 *self, Color _rgba) { new (self)::Im3d::Vec4(_rgba); }
extern "C" void _1_Im3d_Mat3_init_(::Im3d::Mat3 *self) { new (self)::Im3d::Mat3(); }
extern "C" void _2_Im3d_Mat3_init_(::Im3d::Mat3 *self, float _diagonal) { new (self)::Im3d::Mat3(_diagonal); }
extern "C" void _3_Im3d_Mat3_init_(::Im3d::Mat3 *self, float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22) { new (self)::Im3d::Mat3(m00, m01, m02, m10, m11, m12, m20, m21, m22); }
extern "C" void _4_Im3d_Mat3_init_(::Im3d::Mat3 *self, const Vec3 &_colX, const Vec3 &_colY, const Vec3 &_colZ) { new (self)::Im3d::Mat3(_colX, _colY, _colZ); }
extern "C" void _5_Im3d_Mat3_init_(::Im3d::Mat3 *self, const Mat4 &_mat4) { new (self)::Im3d::Mat3(_mat4); }
extern "C" Vec3 _1_Im3d_Mat3_getCol_(const ::Im3d::Mat3 *self, int _i) { return self->getCol(_i); }
extern "C" Vec3 _1_Im3d_Mat3_getRow_(const ::Im3d::Mat3 *self, int _i) { return self->getRow(_i); }
extern "C" void _1_Im3d_Mat3_setCol_(::Im3d::Mat3 *self, int _i, const Vec3 &_v) { self->setCol(_i, _v); }
extern "C" void _1_Im3d_Mat3_setRow_(::Im3d::Mat3 *self, int _i, const Vec3 &_v) { self->setRow(_i, _v); }
extern "C" Vec3 _1_Im3d_Mat3_getScale_(const ::Im3d::Mat3 *self) { return self->getScale(); }
extern "C" void _1_Im3d_Mat3_setScale_(::Im3d::Mat3 *self, const Vec3 &_scale) { self->setScale(_scale); }
extern "C" void _1_Im3d_Mat4_init_(::Im3d::Mat4 *self) { new (self)::Im3d::Mat4(); }
extern "C" void _2_Im3d_Mat4_init_(::Im3d::Mat4 *self, float _diagonal) { new (self)::Im3d::Mat4(_diagonal); }
extern "C" void _3_Im3d_Mat4_init_(::Im3d::Mat4 *self, float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33) { new (self)::Im3d::Mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33); }
extern "C" void _4_Im3d_Mat4_init_(::Im3d::Mat4 *self, const Mat3 &_mat3) { new (self)::Im3d::Mat4(_mat3); }
extern "C" void _5_Im3d_Mat4_init_(::Im3d::Mat4 *self, const Vec3 &_translation, const Mat3 &_rotation, const Vec3 &_scale) { new (self)::Im3d::Mat4(_translation, _rotation, _scale); }
extern "C" Vec4 _1_Im3d_Mat4_getCol_(const ::Im3d::Mat4 *self, int _i) { return self->getCol(_i); }
extern "C" Vec4 _1_Im3d_Mat4_getRow_(const ::Im3d::Mat4 *self, int _i) { return self->getRow(_i); }
extern "C" void _1_Im3d_Mat4_setCol_(::Im3d::Mat4 *self, int _i, const Vec4 &_v) { self->setCol(_i, _v); }
extern "C" void _1_Im3d_Mat4_setRow_(::Im3d::Mat4 *self, int _i, const Vec4 &_v) { self->setRow(_i, _v); }
extern "C" Vec3 _1_Im3d_Mat4_getTranslation_(const ::Im3d::Mat4 *self) { return self->getTranslation(); }
extern "C" void _1_Im3d_Mat4_setTranslation_(::Im3d::Mat4 *self, const Vec3 &_translation) { self->setTranslation(_translation); }
extern "C" Mat3 _1_Im3d_Mat4_getRotation_(const ::Im3d::Mat4 *self) { return self->getRotation(); }
extern "C" void _1_Im3d_Mat4_setRotation_(::Im3d::Mat4 *self, const Mat3 &_rotation) { self->setRotation(_rotation); }
extern "C" Vec3 _1_Im3d_Mat4_getScale_(const ::Im3d::Mat4 *self) { return self->getScale(); }
extern "C" void _1_Im3d_Mat4_setScale_(::Im3d::Mat4 *self, const Vec3 &_scale) { self->setScale(_scale); }
extern "C" void _1_Im3d_Color_init_(::Im3d::Color *self) { new (self)::Im3d::Color(); }
extern "C" void _2_Im3d_Color_init_(::Im3d::Color *self, U32 _rgba) { new (self)::Im3d::Color(_rgba); }
extern "C" void _3_Im3d_Color_init_(::Im3d::Color *self, const Vec4 &_rgba) { new (self)::Im3d::Color(_rgba); }
extern "C" void _4_Im3d_Color_init_(::Im3d::Color *self, const Vec3 &_rgb, float _alpha) { new (self)::Im3d::Color(_rgb, _alpha); }
extern "C" void _5_Im3d_Color_init_(::Im3d::Color *self, float _r, float _g, float _b, float _a) { new (self)::Im3d::Color(_r, _g, _b, _a); }
extern "C" const void *_1_Im3d_Color_Black_ = (void *)&::Im3d::Color_Black;
extern "C" const void *_1_Im3d_Color_White_ = (void *)&::Im3d::Color_White;
extern "C" const void *_1_Im3d_Color_Gray_ = (void *)&::Im3d::Color_Gray;
extern "C" const void *_1_Im3d_Color_Red_ = (void *)&::Im3d::Color_Red;
extern "C" const void *_1_Im3d_Color_Green_ = (void *)&::Im3d::Color_Green;
extern "C" const void *_1_Im3d_Color_Blue_ = (void *)&::Im3d::Color_Blue;
extern "C" const void *_1_Im3d_Color_Magenta_ = (void *)&::Im3d::Color_Magenta;
extern "C" const void *_1_Im3d_Color_Yellow_ = (void *)&::Im3d::Color_Yellow;
extern "C" const void *_1_Im3d_Color_Cyan_ = (void *)&::Im3d::Color_Cyan;
extern "C" const void *_1_Im3d_Color_Pink_ = (void *)&::Im3d::Color_Pink;
extern "C" const void *_1_Im3d_Color_Orange_ = (void *)&::Im3d::Color_Orange;
extern "C" const void *_1_Im3d_Color_Gold_ = (void *)&::Im3d::Color_Gold;
extern "C" const void *_1_Im3d_Color_Brown_ = (void *)&::Im3d::Color_Brown;
extern "C" const void *_1_Im3d_Color_Purple_ = (void *)&::Im3d::Color_Purple;
extern "C" const void *_1_Im3d_Color_Teal_ = (void *)&::Im3d::Color_Teal;
extern "C" const void *_1_Im3d_Color_Navy_ = (void *)&::Im3d::Color_Navy;
extern "C" void _1_Im3d_VertexData_init_(::Im3d::VertexData *self) { new (self)::Im3d::VertexData(); }
extern "C" void _2_Im3d_VertexData_init_(::Im3d::VertexData *self, const Vec3 &_position, float _size, Color _color) { new (self)::Im3d::VertexData(_position, _size, _color); }
extern "C" void _1_Im3d_AppData_setCullFrustum_(::Im3d::AppData *self, const Mat4 &_viewProj, bool _ndcZNegativeOneToOne) { self->setCullFrustum(_viewProj, _ndcZNegativeOneToOne); }
extern "C" void _1_Im3d_Context_init_(::Im3d::Context *self) { new (self)::Im3d::Context(); }
extern "C" void _1_Im3d_Context_deinit_(::Im3d::Context *self) { self->~Context(); }
extern "C" void _1_Im3d_Context_begin_(::Im3d::Context *self, PrimitiveMode _mode) { self->begin(_mode); }
extern "C" void _1_Im3d_Context_end_(::Im3d::Context *self) { self->end(); }
extern "C" void _1_Im3d_Context_vertex_(::Im3d::Context *self, const Vec3 &_position, float _size, Color _color) { self->vertex(_position, _size, _color); }
extern "C" void _1_Im3d_Context_text_(::Im3d::Context *self, const Vec3 &_position, float _size, Color _color, TextFlags _flags, const char *_textStart, const char *_textEnd) { self->text(_position, _size, _color, _flags, _textStart, _textEnd); }
extern "C" void _2_Im3d_Context_text_(::Im3d::Context *self, const Vec3 &_position, float _size, Color _color, TextFlags _flags, const char *_text, va_list _args) { self->text(_position, _size, _color, _flags, _text, _args); }
extern "C" void _1_Im3d_Context_reset_(::Im3d::Context *self) { self->reset(); }
extern "C" void _1_Im3d_Context_merge_(::Im3d::Context *self, const Context &_src) { self->merge(_src); }
extern "C" void _1_Im3d_Context_endFrame_(::Im3d::Context *self) { self->endFrame(); }
extern "C" void _1_Im3d_Context_draw_(::Im3d::Context *self) { self->draw(); }
extern "C" void _1_Im3d_Context_setEnableSorting_(::Im3d::Context *self, bool _enable) { self->setEnableSorting(_enable); }
extern "C" void _1_Im3d_Context_pushEnableSorting_(::Im3d::Context *self, bool _enable) { self->pushEnableSorting(_enable); }
extern "C" void _1_Im3d_Context_popEnableSorting_(::Im3d::Context *self) { self->popEnableSorting(); }
extern "C" void _1_Im3d_Context_pushLayerId_(::Im3d::Context *self, Id _layer) { self->pushLayerId(_layer); }
extern "C" void _1_Im3d_Context_popLayerId_(::Im3d::Context *self) { self->popLayerId(); }
extern "C" bool _1_Im3d_Context_gizmoAxisTranslation_Behavior_(::Im3d::Context *self, Id _id, const Vec3 &_origin, const Vec3 &_axis, float _snap, float _worldHeight, float _worldSize, Vec3 *_out_) { return self->gizmoAxisTranslation_Behavior(_id, _origin, _axis, _snap, _worldHeight, _worldSize, _out_); }
extern "C" void _1_Im3d_Context_gizmoAxisTranslation_Draw_(::Im3d::Context *self, Id _id, const Vec3 &_origin, const Vec3 &_axis, float _worldHeight, float _worldSize, Color _color) { self->gizmoAxisTranslation_Draw(_id, _origin, _axis, _worldHeight, _worldSize, _color); }
extern "C" bool _1_Im3d_Context_gizmoPlaneTranslation_Behavior_(::Im3d::Context *self, Id _id, const Vec3 &_origin, const Vec3 &_normal, float _snap, float _worldSize, Vec3 *_out_) { return self->gizmoPlaneTranslation_Behavior(_id, _origin, _normal, _snap, _worldSize, _out_); }
extern "C" void _1_Im3d_Context_gizmoPlaneTranslation_Draw_(::Im3d::Context *self, Id _id, const Vec3 &_origin, const Vec3 &_normal, float _worldSize, Color _color) { self->gizmoPlaneTranslation_Draw(_id, _origin, _normal, _worldSize, _color); }
extern "C" bool _1_Im3d_Context_gizmoAxislAngle_Behavior_(::Im3d::Context *self, Id _id, const Vec3 &_origin, const Vec3 &_axis, float _snap, float _worldRadius, float _worldSize, float *_out_) { return self->gizmoAxislAngle_Behavior(_id, _origin, _axis, _snap, _worldRadius, _worldSize, _out_); }
extern "C" void _1_Im3d_Context_gizmoAxislAngle_Draw_(::Im3d::Context *self, Id _id, const Vec3 &_origin, const Vec3 &_axis, float _worldRadius, float _angle, Color _color, float _minAlpha) { self->gizmoAxislAngle_Draw(_id, _origin, _axis, _worldRadius, _angle, _color, _minAlpha); }
extern "C" bool _1_Im3d_Context_gizmoAxisScale_Behavior_(::Im3d::Context *self, Id _id, const Vec3 &_origin, const Vec3 &_axis, float _snap, float _worldHeight, float _worldSize, float *_out_) { return self->gizmoAxisScale_Behavior(_id, _origin, _axis, _snap, _worldHeight, _worldSize, _out_); }
extern "C" void _1_Im3d_Context_gizmoAxisScale_Draw_(::Im3d::Context *self, Id _id, const Vec3 &_origin, const Vec3 &_axis, float _worldHeight, float _worldSize, Color _color) { self->gizmoAxisScale_Draw(_id, _origin, _axis, _worldHeight, _worldSize, _color); }
extern "C" float _1_Im3d_Context_pixelsToWorldSize_(::Im3d::Context *self, const Vec3 &_position, float _pixels) { return self->pixelsToWorldSize(_position, _pixels); }
extern "C" float _1_Im3d_Context_worldSizeToPixels_(::Im3d::Context *self, const Vec3 &_position, float _pixels) { return self->worldSizeToPixels(_position, _pixels); }
extern "C" int _1_Im3d_Context_estimateLevelOfDetail_(::Im3d::Context *self, const Vec3 &_position, float _worldSize, int _min, int _max) { return self->estimateLevelOfDetail(_position, _worldSize, _min, _max); }
extern "C" bool _1_Im3d_Context_makeHot_(::Im3d::Context *self, Id _id, float _depth, bool _intersects) { return self->makeHot(_id, _depth, _intersects); }
extern "C" void _1_Im3d_Context_makeActive_(::Im3d::Context *self, Id _id) { self->makeActive(_id); }
extern "C" void _1_Im3d_Context_resetId_(::Im3d::Context *self) { self->resetId(); }
extern "C" bool _1_Im3d_Context_isKeyDown_(const ::Im3d::Context *self, Key _key) { return self->isKeyDown(_key); }
extern "C" bool _1_Im3d_Context_isVisible_(::Im3d::Context *self, const VertexData *_vdata, DrawPrimitiveType _prim) { return self->isVisible(_vdata, _prim); }
extern "C" bool _2_Im3d_Context_isVisible_(::Im3d::Context *self, const Vec3 &_origin, float _radius) { return self->isVisible(_origin, _radius); }
extern "C" bool _3_Im3d_Context_isVisible_(::Im3d::Context *self, const Vec3 &_min, const Vec3 &_max) { return self->isVisible(_min, _max); }
extern "C" U32 _1_Im3d_Context_getPrimitiveCount_(const ::Im3d::Context *self, DrawPrimitiveType _type) { return self->getPrimitiveCount(_type); }
extern "C" U32 _1_Im3d_Context_getTextCount_(const ::Im3d::Context *self) { return self->getTextCount(); }
extern "C" U32 _1_Im3d_Context_getLayerCount_(const ::Im3d::Context *self) { return self->getLayerCount(); }
extern "C" const void *_1_Im3d_internal_g_CurrentContext_ = (void *)&::Im3d::internal::g_CurrentContext;
